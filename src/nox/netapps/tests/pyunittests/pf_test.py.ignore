import array
from nox.lib.packet.ethernet import *
from nox.apps.tests import unittest
from nox.apps.pf import *

ether_tcp_str = \
"""\
\x00\x07\xe9\x4c\xa9\xeb\x00\xd0\x05\x5d\x24\x00\x08\x00\x45\x00\
\x00\x3c\xc0\xe1\x40\x00\x35\x06\x12\x56\x45\x6b\x37\xa8\xab\x40\
\x4a\x31\xc0\x1f\x00\x50\x4e\xe2\xa8\x86\x00\x00\x00\x00\xa0\x02\
\x16\xd0\xa9\x8e\x00\x00\x02\x04\x05\x84\x04\x02\x08\x0a\x03\xe0\
\x59\x97\x00\x00\x00\x00\x01\x03\x03\x04\
"""

ether_vlan_tcp_str = \
"""\
\x00\x07\xe9\x4c\xa9\xeb\x00\xd0\x05\x5d\x24\x00\x81\x00\xc2\x3a\
\x08\x00\x45\x00\
\x00\x3c\xc0\xe1\x40\x00\x35\x06\x12\x56\x45\x6b\x37\xa8\xab\x40\
\x4a\x31\xc0\x1f\x00\x50\x4e\xe2\xa8\x86\x00\x00\x00\x00\xa0\x02\
\x16\xd0\xa9\x8e\x00\x00\x02\x04\x05\x84\x04\x02\x08\x0a\x03\xe0\
\x59\x97\x00\x00\x00\x00\x01\x03\x03\x04\
"""

# this test case is currently disabled because even loading the c++ 
# module upon which it depends causes an error


class PFTestCase(unittest.TestCase):

    def getInterface(self):
        return str(PFTestCase)    

    def configure(self, config):
        from nox.apps.pf.pypf import PyPF
        self.pf = self.resolve(PyPF)

    def setUp(self):
        pass 
 
    def tearDown(self):
        pass

    def testP0F(self):
        eth = ethernet(ether_tcp_str)
        res = pf_results();
        assert(self.pf.fp(eth.arr, res))
        assert(res.p0f.os == 'Linux')
        assert(res.p0f.os_desc == '2.6 (newer, 5)')
        assert(res.p0f.signature == "S4:53:1:60:M1412,S,T,N,W4:.")

    def testPF(self):
        eth = ethernet(ether_tcp_str)
        res = pf_results();
        assert(self.pf.fp(eth.arr, res))
        assert(res.bpf.os == "Linux 2.4/2.6 <= 2.6.7")
        assert(res.bpf.signature == '5840:53:1:60:M1412,S,T,N,W4')

    def testVLAN(self):
        eth = ethernet(ether_vlan_tcp_str)
        res = pf_results();
        assert(self.pf.fp(eth.arr, res))
        assert(res.p0f.os == 'Linux')
        assert(res.p0f.os_desc == '2.6 (newer, 5)')
        assert(res.p0f.signature == "S4:53:1:60:M1412,S,T,N,W4:.")
        assert(res.bpf.os == "Linux 2.4/2.6 <= 2.6.7")
        assert(res.bpf.signature == '5840:53:1:60:M1412,S,T,N,W4')

    def testEdge(self):
        res = pf_results();
        assert(self.pf.fp(ether_tcp_str, res))
        self.pf.fp(ether_tcp_str[:10], res)
        self.pf.fp(ether_tcp_str[:15], res)
        self.pf.fp(ether_tcp_str[:20], res)
        self.pf.fp(ether_tcp_str[:24], res)
        self.pf.fp(ether_tcp_str[:30], res)
        self.pf.fp(ether_tcp_str[:34], res)
        self.pf.fp(ether_tcp_str[:40], res)
        self.pf.fp(ether_tcp_str[:44], res)
        self.pf.fp(ether_tcp_str[:50], res)
        self.pf.fp(ether_tcp_str[:54], res)
        self.pf.fp(ether_tcp_str[:58], res)
        self.pf.fp(ether_tcp_str[:62], res)    

def suite(ctxt, name):
    suite = unittest.TestSuite()
    suite.addTest(PFTestCase("testP0F", ctxt, name))
    suite.addTest(PFTestCase("testPF", ctxt, name))
    suite.addTest(PFTestCase("testVLAN", ctxt, name))
    suite.addTest(PFTestCase("testEdge", ctxt, name))
    return suite
